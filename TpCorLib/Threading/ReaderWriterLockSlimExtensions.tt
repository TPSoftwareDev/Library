<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".Generated.cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Template File: <#= this.Host.TemplateFile #>
//		Timestamp: <#= DateTime.Now.ToString() #>
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading;

namespace Teleperformance.Threading
{
    partial class ReaderWriterLockSlimExtensions
    {
		//
		// ExecuteWithReadLock
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void ExecuteWithReadLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult ReturnWithReadLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();

				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		<# } #>

		//
		// ExecuteWithWriteLock
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void ExecuteWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult ReturnWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		<# } #>

		//
		// ExecuteWithReadLockIf
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void ExecuteWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult ReturnWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		<# } #>

		//
		// ExecuteWithWriteLockIf
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void ExecuteWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult ReturnWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		<# } #>

		//
		// TryExecuteWithReadLock
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void TryExecuteWithReadLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static void TryExecuteWithReadLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult TryReturnWithReadLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);

				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static TResult TryReturnWithReadLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);

				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		<# } #>

		//
		// TryExecuteWithWriteLock
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void TryExecuteWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static void TryExecuteWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim,
			Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult TryReturnWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static TResult TryReturnWithWriteLock<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		<# } #>

		//
		// TryExecuteWithReadLockIf
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void TryExecuteWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static void TryExecuteWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim,
			bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult TryReturnWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static TResult TryReturnWithReadLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		<# } #>

		//
		// TryExecuteWithWriteLockIf
		//

		<# for (int i = 1; i < 5; i++) { #>

		public static void TryExecuteWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static void TryExecuteWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<<#= getGenericTypeDeclarations(1, i) #>> action, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				action(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		<# } #>

		<# for (int i = 1; i < 5; i++) { #>

		public static TResult TryReturnWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static TResult TryReturnWithWriteLockIf<<#= getGenericTypeDeclarations(1, i) #>, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<<#= getGenericTypeDeclarations(1, i) #>, TResult> func, <#= getGenericParameters(1, i) #>, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				
				return func(<#= getGenericArguments(1, i) #>);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		<# } #>
}
}
<#+
	private string[] traceLevels = new [] { "Verbose", "Information", "Warning", "Error", "Critical" };

	private string getGenericTypeDeclarations(int start, int end) 
	{
		StringWriter writer = new StringWriter();

		for (int i = start; i <= end; i++) 
		{
			if (i != start)
			{
				writer.Write(", ");
			}

			writer.Write("T");
			writer.Write(i);
		}

		return writer.ToString();
	}

	private string getGenericParameters(int start, int end) 
	{
		StringWriter writer = new StringWriter();

		for (int i = start; i <= end; i++) 
		{
			if (i != start)
			{
				writer.Write(", ");
			}

			writer.Write("T");
			writer.Write(i);
			writer.Write(" ");
			writer.Write("t");
			writer.Write(i);
		}

		return writer.ToString();
	}

	private string getGenericArguments(int start, int end) 
	{
		StringWriter writer = new StringWriter();

		for (int i = start; i <= end; i++) 
		{
			if (i != start)
			{
				writer.Write(", ");
			}

			writer.Write("t");
			writer.Write(i);
		}

		return writer.ToString();
	}
#>
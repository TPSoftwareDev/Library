//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Template File: C:\BitbucketProj\.netStandard\TpCorLib\TpCorLib\Threading\ReaderWriterLockSlimExtensions.tt
//		Timestamp: 28-May-20 6:51:30 PM
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading;

namespace Teleperformance.Threading
{
    partial class ReaderWriterLockSlimExtensions
    {
		//
		// ExecuteWithReadLock
		//

		
		public static void ExecuteWithReadLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1> action, T1 t1)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void ExecuteWithReadLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2> action, T1 t1, T2 t2)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void ExecuteWithReadLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void ExecuteWithReadLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		
		public static TResult ReturnWithReadLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, TResult> func, T1 t1)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();

				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult ReturnWithReadLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, TResult> func, T1 t1, T2 t2)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();

				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult ReturnWithReadLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();

				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult ReturnWithReadLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterReadLock();

				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		//
		// ExecuteWithWriteLock
		//

		
		public static void ExecuteWithWriteLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1> action, T1 t1)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void ExecuteWithWriteLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2> action, T1 t1, T2 t2)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void ExecuteWithWriteLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void ExecuteWithWriteLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		
		public static TResult ReturnWithWriteLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, TResult> func, T1 t1)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult ReturnWithWriteLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, TResult> func, T1 t1, T2 t2)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult ReturnWithWriteLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult ReturnWithWriteLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.EnterWriteLock();
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		//
		// ExecuteWithReadLockIf
		//

		
		public static void ExecuteWithReadLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1> action, T1 t1)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void ExecuteWithReadLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2> action, T1 t1, T2 t2)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void ExecuteWithReadLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void ExecuteWithReadLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		
		public static TResult ReturnWithReadLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, TResult> func, T1 t1)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult ReturnWithReadLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult ReturnWithReadLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult ReturnWithReadLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			try
			{
				readerWriterLockSlim.EnterReadLockIf(condition);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		//
		// ExecuteWithWriteLockIf
		//

		
		public static void ExecuteWithWriteLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1> action, T1 t1)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void ExecuteWithWriteLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2> action, T1 t1, T2 t2)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void ExecuteWithWriteLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void ExecuteWithWriteLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		
		public static TResult ReturnWithWriteLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, TResult> func, T1 t1)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult ReturnWithWriteLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult ReturnWithWriteLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult ReturnWithWriteLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4)
		{
			try
			{
				readerWriterLockSlim.EnterWriteLockIf(condition);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		//
		// TryExecuteWithReadLock
		//

		
		public static void TryExecuteWithReadLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1> action, T1 t1, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static void TryExecuteWithReadLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1> action, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void TryExecuteWithReadLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2> action, T1 t1, T2 t2, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static void TryExecuteWithReadLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2> action, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void TryExecuteWithReadLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static void TryExecuteWithReadLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static void TryExecuteWithReadLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static void TryExecuteWithReadLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		
		public static TResult TryReturnWithReadLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, TResult> func, T1 t1, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);

				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static TResult TryReturnWithReadLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, TResult> func, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);

				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult TryReturnWithReadLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, TResult> func, T1 t1, T2 t2, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);

				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static TResult TryReturnWithReadLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, TResult> func, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);

				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult TryReturnWithReadLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);

				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static TResult TryReturnWithReadLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);

				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		public static TResult TryReturnWithReadLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(timeout);

				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		public static TResult TryReturnWithReadLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterReadLock(millisecondsTimeout);

				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLock();
			}
		}

		
		//
		// TryExecuteWithWriteLock
		//

		
		public static void TryExecuteWithWriteLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1> action, T1 t1, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static void TryExecuteWithWriteLock<T1>(this ReaderWriterLockSlim readerWriterLockSlim,
			Action<T1> action, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void TryExecuteWithWriteLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2> action, T1 t1, T2 t2, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static void TryExecuteWithWriteLock<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim,
			Action<T1, T2> action, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void TryExecuteWithWriteLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static void TryExecuteWithWriteLock<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim,
			Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static void TryExecuteWithWriteLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static void TryExecuteWithWriteLock<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim,
			Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		
		public static TResult TryReturnWithWriteLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, TResult> func, T1 t1, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static TResult TryReturnWithWriteLock<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, TResult> func, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult TryReturnWithWriteLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, TResult> func, T1 t1, T2 t2, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static TResult TryReturnWithWriteLock<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, TResult> func, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult TryReturnWithWriteLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static TResult TryReturnWithWriteLock<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		public static TResult TryReturnWithWriteLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(timeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		public static TResult TryReturnWithWriteLock<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim,
			Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			if (null == readerWriterLockSlim)
			{
				throw new ArgumentNullException("readerWriterLockSlim");
			}

			try
			{
				readerWriterLockSlim.TryEnterWriteLock(millisecondsTimeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLock();
			}
		}

		
		//
		// TryExecuteWithReadLockIf
		//

		
		public static void TryExecuteWithReadLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1> action, T1 t1, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static void TryExecuteWithReadLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim,
			bool condition, Action<T1> action, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void TryExecuteWithReadLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2> action, T1 t1, T2 t2, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static void TryExecuteWithReadLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim,
			bool condition, Action<T1, T2> action, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void TryExecuteWithReadLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static void TryExecuteWithReadLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim,
			bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static void TryExecuteWithReadLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static void TryExecuteWithReadLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim,
			bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		
		public static TResult TryReturnWithReadLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, TResult> func, T1 t1, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static TResult TryReturnWithReadLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, TResult> func, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithReadLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static TResult TryReturnWithReadLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithReadLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static TResult TryReturnWithReadLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithReadLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, timeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		public static TResult TryReturnWithReadLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterReadLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitReadLockIf(condition);
			}
		}

		
		//
		// TryExecuteWithWriteLockIf
		//

		
		public static void TryExecuteWithWriteLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1> action, T1 t1, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static void TryExecuteWithWriteLockIf<T1>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1> action, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				action(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void TryExecuteWithWriteLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2> action, T1 t1, T2 t2, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static void TryExecuteWithWriteLockIf<T1, T2>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2> action, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				action(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void TryExecuteWithWriteLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static void TryExecuteWithWriteLockIf<T1, T2, T3>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3> action, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				action(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static void TryExecuteWithWriteLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static void TryExecuteWithWriteLockIf<T1, T2, T3, T4>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Action<T1, T2, T3, T4> action, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				action(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		
		public static TResult TryReturnWithWriteLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, TResult> func, T1 t1, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static TResult TryReturnWithWriteLockIf<T1, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, TResult> func, T1 t1, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				
				return func(t1);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithWriteLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static TResult TryReturnWithWriteLockIf<T1, T2, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, TResult> func, T1 t1, T2 t2, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithWriteLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static TResult TryReturnWithWriteLockIf<T1, T2, T3, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, TResult> func, T1 t1, T2 t2, T3 t3, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2, t3);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		
		public static TResult TryReturnWithWriteLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, TimeSpan timeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, timeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		public static TResult TryReturnWithWriteLockIf<T1, T2, T3, T4, TResult>(this ReaderWriterLockSlim readerWriterLockSlim, 
			bool condition, Func<T1, T2, T3, T4, TResult> func, T1 t1, T2 t2, T3 t3, T4 t4, int millisecondsTimeout = ReaderWriterLockSlimExtensions.DefaultTryMillisecondsTimeout)
		{
			try
			{
				readerWriterLockSlim.TryEnterWriteLockIf(condition, millisecondsTimeout);
				
				return func(t1, t2, t3, t4);
			}
			finally
			{
				readerWriterLockSlim.ExitWriteLockIf(condition);
			}
		}

		}
}
